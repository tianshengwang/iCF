% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/best_tree_MSegar.R
\name{find_best_tree}
\alias{find_best_tree}
\title{Function that takes as input a forest and the cost for not pruning.
Returns an index of the best tree, the r_loss, and a list
corresponding to the best tree, where each element of the list
corresponds to a node. The attribute of the nodes in the list include
is_pruned_leaf, which indicates whether the node is a leaf in the
pruned tree (or rather it indicates whether the r_loss of the node
comes directly from the samples in that node or from its children
nodes), and samples, which is a vector of the samples in that node}
\usage{
find_best_tree(forest, type = c("regression", "causal"), cost = 0)
}
\arguments{
\item{forest}{The forest from which we want the best tree.}

\item{type}{The type of the forest: regression or causal}

\item{cost}{The cost for not pruning}

\item{Y}{The Y values of the tree.}
}
\value{
A list with the index for the best tree, the corresponding r_loss, the and prune_info
}
\description{
Function that takes as input a forest and the cost for not pruning.
Returns an index of the best tree, the r_loss, and a list
corresponding to the best tree, where each element of the list
corresponds to a node. The attribute of the nodes in the list include
is_pruned_leaf, which indicates whether the node is a leaf in the
pruned tree (or rather it indicates whether the r_loss of the node
comes directly from the samples in that node or from its children
nodes), and samples, which is a vector of the samples in that node
}
\examples{
\dontrun{
# Train a regression forest
n <- 50; p <- 10
X <- matrix(rnorm(n*p), n, p)
Y <- X[,1] * rnorm(n)
forest <- grf::regression_forest(X,Y)

# Find the best tree
best_tree_info <- find_best_tree(forest, "regression")
}

}
